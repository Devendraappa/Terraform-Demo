name: Terraform Workflow with OIDC and Artifact Upload 

on:
  push:
    branches:
      - main

jobs:
  terraform:
    runs-on: ubuntu-latest

    permissions:
      id-token: write  # Required for OIDC
      contents: read   # Required to access repository contents

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.6

      # Step 3: Configure AWS Credentials using OIDC
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.ROLE_NAME }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 4: Initialize Terraform
      - name: Terraform Init
        run: terraform init

      # Step 5: Terraform Validate (continue on error)
      - name: Terraform Validate
        continue-on-error: true  # This allows the workflow to continue even if this step fails
        env:
          TF_LOG: DEBUG
          TF_LOG_PATH: terraform_validate.log
        run: terraform validate

      # Step 6: Terraform Plan (continue on error)
      - name: Terraform Plan
        continue-on-error: true  # This ensures the workflow continues even if Terraform Validate fails
        env:
          TF_LOG: INFO
          TF_LOG_PATH: terraform_plan.log
        run: terraform plan -out=tfplan

      # Step 7: Terraform Apply (continue on error)
      - name: Terraform Apply
        continue-on-error: true  # This ensures the workflow continues even if Plan fails
        env:
          TF_LOG: TRACE
          TF_LOG_PATH: terraform_apply.log
        run: terraform apply -auto-approve tfplan

      # Step 8: Ensure Logs Directory Exists and Copy Logs
      - name: Ensure Logs Directory Exists and Copy Logs
        run: |
          echo "Checking if logs directory exists"
          mkdir -p $GITHUB_WORKSPACE/logs
          echo "Directory created at: $GITHUB_WORKSPACE/logs"
          
          echo "Checking if log files exist"
          if [ -f terraform_validate.log ]; then
            echo "terraform_validate.log exists, copying to logs directory."
            cp terraform_validate.log $GITHUB_WORKSPACE/logs/
          else
            echo "terraform_validate.log does not exist."
          fi
          
          if [ -f terraform_plan.log ]; then
            echo "terraform_plan.log exists, copying to logs directory."
            cp terraform_plan.log $GITHUB_WORKSPACE/logs/
          else
            echo "terraform_plan.log does not exist."
          fi
          
          if [ -f terraform_apply.log ]; then
            echo "terraform_apply.log exists, copying to logs directory."
            cp terraform_apply.log $GITHUB_WORKSPACE/logs/
          else
            echo "terraform_apply.log does not exist."
          fi
          
          # Verify files in logs directory
          echo "Files in logs directory:"
          ls -l $GITHUB_WORKSPACE/logs/

      # Step 9: Upload Logs as Artifacts (even if failed)
      - name: Upload Terraform Logs as Artifacts
        if: always()  # Upload artifacts even if the workflow fails
        uses: actions/upload-artifact@v3
        with:
          name: terraform-logs
          path: $GITHUB_WORKSPACE/logs

      # Step 10: Print Logs on Failure (ensure it's only printed on failure)
      - name: Print Logs on Failure
        if: failure()  # Print logs only if any previous steps fail
        run: |
          echo "Terraform failed. Logs are as follows:"
          cat $GITHUB_WORKSPACE/logs/terraform_validate.log || true
          cat $GITHUB_WORKSPACE/logs/terraform_plan.log || true
          cat $GITHUB_WORKSPACE/logs/terraform_apply.log || true

      # Step 11: Mark the Job as Failed if Terraform validation fails
      - name: Fail the Job if Validation Fails
        if: failure()  # This ensures the job is marked as failed if validation fails
        run: exit 1
